
#-----------------------From d.simulate():-------------------------------------
            # LDUR:
            elif(d.opcode_string[instruction_index] == 'LDUR'):
                rt = d.arg3[instruction_index]
                rn = d.arg2[instruction_index]
                imm = d.arg1[instruction_index]

                try:
                    source = d.registers[rn] + imm * 4
                    dest = d.registers[rt]
                    source_index = d.memory_pc_array.index(source)
                    d.registers[rt] = d.memory[source_index]
                except:
                    print('Invalid source for LDUR. Exiting program.')
                    sys.exit()

#-----------------------From p.WB():-------------------------------------------
    # Write Back Unit:
    def WB(self):
        # Post MEM buffer:
        # LDUR only.
        # instruction index (which gives you the destination reg for the
        # writeback unit) and data will be written to the post-MEM buffer.
        if(p.post_mem_buff[1] != -1):
            print('\n\nmem action taken!')

            value = p.post_mem_buff[0]
            instruction_index = p.post_mem_buff[1]
            register = d.arg????????[instruction_index]

            p.registers[instruction_index] = p.post_mem_buff[0]
            p.post_mem_buff[0] = -1
            p.post_mem_buff[1] = -1

        # Post ALU buffer:
        # The ALU handles all non-memory instructions (everything except LDUR
        # and STUR and branch instructions that are handled in the IF stage).
        # The post-ALU buffer has one entry that can store the instruction
        # with the destination register ID and the result of the ALU operation.
        if(p.post_alu_buff[1] != -1):
            print('\n\nalu action taken!')

            value = p.post_alu_buff[0]
            index = p.post_alu_buff[1]

            p.registers[p.post_alu_buff[1]] = p.post_alu_buff[0]
            p.post_alu_buff[0] = -1
            p.post_alu_buff[1] = -1


#-----------------------Old WB Test method:------------------------------------
    # WB unit tester (for testing only):
    def WB_test0(self):
        # test MEM post buffer:
        j = 0
        k = 0
        while(j < 32):
            # set value:
            p.post_mem_buff[0] = k

            # set instruction index:
            p.post_mem_buff[1] = j

            # run WB and print registers:
            p.WB()
            p.print_registers()

            # increment local variables:
            j += 1
            k = j*5

        # test ALU post buffer:
        j = 0
        k = 0
        while(j < 32):
            # set value:
            p.post_alu_buff[0] = k

            # set instruction index:
            p.post_alu_buff[1] = j

            # run WB and print registers:
            p.WB()
            p.print_registers()

            # increment local variables:
            j += 1
            k = j*3

