we will need to have a seperate functions to run the pipelining.

Function he supplied:

def run( self):
    go = True
    while go:
        self.WB.run()
        self.ALU.run()
        self.MEM.run()
        self.issue.run()
        go = self.fetch.run()
        self.printState( )
        self.cycle += 1

From reading the powerpoint again, I think we have to create the 3 new lists
(dest, src1, src2) and initatize them in the disassembler.

def WB()
  //we will need to send two variables into the function (postMemBuffer and postALUBuffer)
  //each will be structured as a two value list structured as: [value, instruction index]
  //both are initalized as: [-1, -1] (meaning no values)
  - postmembuffer and postalubuffer are filled with value and instruction index from lists
    created in disassembler
  - check if the instruction is valid in both buffers
  - if valid  //example: (post(Mem/Alu)buf[1] != -1) //will have to be two if statements 
      //this is on the register file
     - writes value of [0] into register in [1]
     //Example he gave: sim.R[ sim.destReg[ sim.postMemBuff[1] ] ] = sim.postMemBuff[0] 
     //For our project(maybe): d.registers_per_instruction[d.registers[d.postMemBuff[1]]] = d.postMemBuff[0]

  - reset postbuffers to [-1, -1]


#-------------------------------------------------------------------------------

Post-ALU buffer:
The post-ALU buffer has one entry that can store the instruction with the
destination register ID and the result of the ALU operation

Post-MEM buffer:
LDUR only (STUR never goes.)
instruction index (which gives you the destination reg for the writeback unit)
and data will be written to the post-MEM buffer.

Write Back Unit:
The WB unit can execute two write-backs in one cycle.  It fetches the contents
of the post-ALU and post-MEM buffers and updates the register file.






























